1 * 2 + 3 -> Mult (1) (Add (2) (3))
          -> (Mult (Add 1 2) 3)
(1 * 2) + 3

2^2 = 4
2_4 = 2
_2^ = 2



~
-------

~(x) -> x _ 2
~(x) -> x * 2
2_4

SHELL="/bin/bash"

dup($x) -> $x pi; $x

$(y <- 3 | x <- 2 + y | x + 1) -> 6

foo(z) =  3 | x + 2 | x + 1 | x + z

2 | x
foo(x, y) <- 3 | + 2 | 2 - <- |
x,y | foo <- 
foo + 3== 3 | + 2 | 2 - <- | + 3

x, y | foo <- 3 | + 2 | + x | + y
                                       -3
z := 2

foo(
  x -> y -> 3 | + 2 | + x | 1 - | + y
)

x(1)

(x -> 2 + x)
var(
    x->y->x+y
)

10 var 20 === 20 | (10 | var) = 30

10 + 20 

<$>(
    f -> g -> g | f
    )



10 | x -> 12

1 | foo | (2 |)

| >
< ()
x | 1 + |



foo(x)

(1 - ((3) + 2) + x)) + y
{ }
(x,y) ->

z <- 5
s

10, 100 | 10, 100 < 3 | + 2 | + 10 | + 100| >
1 | foo




foo -> 1
foo(gk)
$foo 

foo z = k + z
    where y = 3
          x = 2 + y
          k = x + 1


implicit_add
implicit_bsr
>>(
    x -> y ->
)


<name> <expr> :: assignment
( <expr> ) :: scope

+ :: (
    x -> y -> y | (x | implicit_add)
  )

10 |

+(1,2) == 1 + 2 == 


+ := a -> b -> a | implicit_add | b

[a-zA-Z_][a-zA-Z_0-9]*


$(include("blah"))

$(inlude("prelude"))

var := 123


abc.daf
(10)

\b\d+\b

letter_numbers
_10
x _ 20
Ap (Ap a b) c | d


Ap (Ap (Ap a b) c) d

foo | (bar|$) | 


<lhs> | <rhs>

Ap 2 (Ap 1 +)
Apply <lhs> <rhs>

1 | implicit_add
Add 1

----

$     is evaluation / reduction / call / invoke
|     is pipe
()    is scope
:=    is assignment
\d+   is integer
//    is single line comment
/* */ is multiline
